#!/usr/bin/python3 -u

import argparse
import datetime
import json
import subprocess
import sys

import yaml


def write_status_file(status):
    with open(args.status_file, "w") as status_file:
        json.dump({
            "utc": datetime.datetime.utcnow().isoformat(),
            "status": status
        }, status_file, indent=2)


def execute(command):
    return subprocess.Popen(command, shell=True, stdout=sys.stdout, stderr=sys.stderr).wait() == 0


argparser = argparse.ArgumentParser(description="Minimalist self-healing.")
argparser.add_argument("-c", "--config-file", default="/etc/heal.conf", help="path to the yaml or json configuration file (default: /etc/heal.conf)")
argparser.add_argument("-s", "--status-file", default="/var/tmp/status.json", help="path to the produced status file (default: /var/tmp/status.json)")
args = argparser.parse_args()

with open(args.config_file, "r") as config_file:
    config = yaml.load(config_file, Loader=yaml.BaseLoader)  # uses the yaml baseloader to preserve all strings

for step in config:
    if not execute(step.get("test")):
        write_status_file("fixing")
        if not execute(step.get("fix")) or not execute(step.get("test")):
            write_status_file("ko")
            exit(1)

write_status_file("ok")
